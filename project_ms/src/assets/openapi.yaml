openapi: 3.0.0
info:
  title: Server API schema
  description: API reference for the Project Management System
  version: 2.1.0

servers:
  - url: /api/v2
    description: API version 2

security:
  - bearerAuth: []

paths:
  # Authentication endpoints
  /auth/login:
    post:
      summary: User login
      description: Authenticate user and create account if it doesn't exist
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User already exists and is authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginExistingUserResponse'
        '201':
          description: New user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginNewUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Student endpoints
  /students:
    get:
      summary: List all students
      description: Retrieve a list of all students (teacher role required)
      tags:
        - Students
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved students
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentsListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new student
      description: Create a new student account (student role required)
      tags:
        - Students
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentRequest'
      responses:
        '200':
          description: Student already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentExistsResponse'
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /students/batchCreate:
    post:
      summary: Create multiple students in bulk
      description: Create or update multiple students at once (teacher role required)
      tags:
        - Students
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateStudentsRequest'
      responses:
        '200':
          description: Bulk operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /students/me:
    get:
      summary: Get current student information
      description: Retrieve information about the currently authenticated student
      tags:
        - Students
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved current student information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentStudentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /students/{studentId}:
    put:
      summary: Update a student
      description: Update student information (teacher role required)
      tags:
        - Students
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the student to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentRequest'
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentUpdatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a student
      description: Delete a student and all associated data (teacher role required)
      tags:
        - Students
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the student to delete
      responses:
        '200':
          description: Student deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /students/{studentId}/projects:
    get:
      summary: List student projects
      description: Retrieve a list of project IDs for a specific student (teacher role required)
      tags:
        - Students
      security:
        - bearerAuth: []
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the student
      responses:
        '200':
          description: Successfully retrieved student projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProjectsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Teacher endpoints
  /teachers/me:
    get:
      summary: Get current teacher profile
      description: Retrieves the teacher profile associated with the authenticated user
      tags:
        - Teachers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Teacher profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Teacher'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teachers:
    get:
      summary: List all teachers
      description: Retrieves a list of all teachers with their resource information
      tags:
        - Teachers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Teachers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Teacher'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new teacher
      description: Creates a new teacher record in the system
      tags:
        - Teachers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeacherRequest'
      responses:
        '201':
          description: Teacher created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Teacher'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teachers/available/{studyYear}:
    get:
      summary: List available teachers
      description: Retrieves teachers who are available for allocation in the specified study year
      tags:
        - Teachers
      security:
        - bearerAuth: []
      parameters:
        - name: studyYear
          in: path
          required: true
          schema:
            type: string
          description: The study year to check availability for
      responses:
        '200':
          description: Available teachers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AvailableTeacher'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /teachers/{teacherId}:
    put:
      summary: Update teacher
      description: Updates an existing teacher's information
      tags:
        - Teachers
      security:
        - bearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: integer
          description: The teacher ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeacherRequest'
      responses:
        '200':
          description: Teacher updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Resource endpoints
  /resources/me:
    get:
      summary: Get current user's resources
      description: Retrieves resources specific to the authenticated teacher
      tags:
        - Resources
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Resources retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CurrentUserResourcesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new resource
      description: Creates a new resource allocation for a teacher
      tags:
        - Resources
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRequest'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/TeacherResource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/{resourceId}:
    put:
      summary: Update resource
      description: Updates an existing resource's total_resources value
      tags:
        - Resources
      security:
        - bearerAuth: []
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: integer
          description: The resource ID to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResourceRequest'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UpdateResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/teachers/{teacherId}:
    get:
      summary: Get teacher's resources
      description: Retrieves resources for a specific teacher by ID
      tags:
        - Resources
      security:
        - bearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: integer
          description: The teacher ID to get resources for
      responses:
        '200':
          description: Teacher resources retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TeacherResource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Company endpoints
  /companies:
    get:
      summary: List all companies
      description: Retrieve a list of all companies
      tags:
        - Companies
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved companies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompaniesListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new company
      description: Create a new company
      tags:
        - Companies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompanyRequest'
      responses:
        '201':
          description: Company created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /companies/{companyId}:
    delete:
      summary: Delete a company
      description: Delete a specific company (requires teacher role)
      tags:
        - Companies
      security:
        - bearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the company to delete
      responses:
        '200':
          description: Company deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /companies/favorites:
    get:
      summary: List favorite companies
      description: Retrieve a list of favorite companies for the authenticated teacher
      tags:
        - Companies
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved favorite companies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteCompaniesResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Add favorite company
      description: Add a company to favorites (requires teacher role)
      tags:
        - Companies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFavoriteCompanyRequest'
      responses:
        '201':
          description: Company added to favorites successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteCompanyCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /companies/favorites/{companyId}:
    delete:
      summary: Remove favorite company
      description: Remove a company from favorites (requires teacher role)
      tags:
        - Companies
      security:
        - bearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the company to remove from favorites
      responses:
        '200':
          description: Company removed from favorites successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Project endpoints
  /projects:
    get:
      summary: List all projects
      description: Get a list of all projects with basic information
      operationId: listProjects
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/TeacherRoleRequired'
      responses:
        '200':
          description: List of projects retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new project
      description: Create a new project (student role required)
      operationId: createProject
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/StudentRoleRequired'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/me:
    get:
      summary: Get current user's projects
      description: Get projects associated with the authenticated user (student or teacher)
      operationId: listUserProjects
      tags:
        - Projects
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's projects retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/joinProject:
    post:
      summary: Join project using code or email
      description: Add a student to a project using join code or email
      operationId: addProjectMember
      tags:
        - Project Members
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinProjectRequest'
      responses:
        '201':
          description: Student added to project successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}:
    get:
      summary: Get a specific project
      description: Get detailed information about a specific project
      operationId: getProject
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update a project
      description: Update project details
      operationId: updateProject
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a project
      description: Delete a project and all associated data
      operationId: deleteProject
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '204':
          description: Project deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/members:
    get:
      summary: List project members
      description: Get a list of students assigned to the project
      operationId: listProjectMembers
      tags:
        - Project Members
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project members retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/updateStatus:
    put:
      summary: Update project status
      description: Update the status of a project
      operationId: updateProjectStatus
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - project_status
              properties:
                project_status:
                  type: string
                  enum: [active, completed, cancelled, on_hold]
                  description: New status for the project
      responses:
        '200':
          description: Project status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/teacher:
    put:
      summary: Update project teacher
      description: Assign a new teacher to a project (teacher role required)
      operationId: updateProjectTeacher
      tags:
        - Projects
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/TeacherRoleRequired'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - new_teacher_id
              properties:
                new_teacher_id:
                  type: integer
                  description: ID of the new teacher to assign
      responses:
        '200':
          description: Teacher assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/notes:
    get:
      summary: List project notes
      description: Get all notes for a specific project
      operationId: listProjectNotes
      tags:
        - Project Notes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project notes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Add a project note
      description: Create a new note for a project
      operationId: addProjectNote
      tags:
        - Project Notes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
      responses:
        '201':
          description: Note created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCreatedResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/notes/{noteId}:
    delete:
      summary: Delete a project note
      description: Delete a specific note from a project
      operationId: deleteProjectNote
      tags:
        - Project Notes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/NoteId'
      responses:
        '204':
          description: Note deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/joinCode:
    get:
      summary: Generate project join code
      description: Generate a join code for students to join the project
      operationId: generateProjectJoinCode
      tags:
        - Project Members
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Join code generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectSuccessResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  parameters:
    ProjectId:
      name: projectId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: Unique identifier for the project

    NoteId:
      name: noteId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: Unique identifier for the note

    TeacherRoleRequired:
      name: X-User-Role
      in: header
      required: true
      schema:
        type: string
        enum: [teacher]
      description: Teacher role required for this endpoint

    StudentRoleRequired:
      name: X-User-Role
      in: header
      required: true
      schema:
        type: string
        enum: [student]
      description: Student role required for this endpoint

  schemas:
    # Base response schemas
    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        message:
          type: string
          description: Response message
      required:
        - success
        - message

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [false]

    # Student schemas
    Student:
      type: object
      properties:
        student_id:
          type: integer
          format: int64
          description: Unique identifier for the student
        student_name:
          type: string
          description: Name of the student
        email:
          type: string
          format: email
          description: Email address of the student
        class_code:
          type: string
          nullable: true
          description: Class code the student belongs to
        created_at:
          type: string
          format: date-time
          description: Timestamp when the student was created
      required:
        - student_id
        - student_name
        - email

    StudentForBatch:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 8
          maxLength: 100
          description: Email address of the student
        student_name:
          type: string
          minLength: 4
          maxLength: 100
          description: Name of the student
        class_code:
          type: string
          maxLength: 16
          description: Optional class code for the student
      required:
        - email
        - student_name

    CreateStudentRequest:
      type: object
      properties:
        class_code:
          type: string
          description: Optional class code for the student
      description: Student name and email are taken from authenticated user

    UpdateStudentRequest:
      type: object
      properties:
        student_name:
          type: string
          minLength: 4
          maxLength: 100
          description: Updated name of the student
        class_code:
          type: string
          description: Updated class code for the student
      description: All fields are optional for partial updates

    BatchCreateStudentsRequest:
      type: object
      properties:
        students:
          type: array
          items:
            $ref: '#/components/schemas/StudentForBatch'
          minItems: 1
          description: Array of students to create or update
      required:
        - students

    UserRole:
      type: object
      properties:
        role:
          type: string
          enum: [student, teacher]
          description: Role of the authenticated user

    # Teacher schemas
    Teacher:
      type: object
      properties:
        teacher_id:
          type: integer
          description: Unique identifier for the teacher
        teacher_name:
          type: string
          description: Name of the teacher
        email:
          type: string
          format: email
          description: Email address of the teacher
        used_resources:
          type: integer
          description: Number of resources currently used by the teacher
        total_resources:
          type: integer
          description: Total number of resources allocated to the teacher
      required:
        - teacher_id
        - teacher_name
        - email

    TeacherResource:
      type: object
      properties:
        resource_id:
          type: integer
          description: Unique identifier for the resource
        teacher_id:
          type: integer
          description: Teacher ID associated with the resource
        used_resources:
          type: integer
          description: Number of resources currently used
        total_resources:
          type: integer
          description: Total number of resources allocated
        study_year:
          type: string
          description: Academic year for the resource allocation
      required:
        - resource_id
        - teacher_id
        - used_resources
        - total_resources
        - study_year

    AvailableTeacher:
      type: object
      properties:
        teacher_id:
          type: integer
          description: Unique identifier for the teacher
        teacher_name:
          type: string
          description: Name of the teacher
        email:
          type: string
          format: email
          description: Email address of the teacher
        used_resources:
          type: integer
          description: Number of resources currently used
        total_resources:
          type: integer
          description: Total number of resources allocated
        resource_id:
          type: integer
          description: Resource ID associated with the teacher
      required:
        - teacher_id
        - teacher_name
        - email
        - used_resources
        - total_resources
        - resource_id

    CreateTeacherRequest:
      type: object
      properties:
        teacher_name:
          type: string
          description: Name of the teacher
        email:
          type: string
          format: email
          description: Email address of the teacher
      required:
        - teacher_name
        - email

    UpdateTeacherRequest:
      type: object
      properties:
        teacher_name:
          type: string
          description: Updated name of the teacher
      required:
        - teacher_name

    CreateResourceRequest:
      type: object
      properties:
        teacher_id:
          type: integer
          description: Teacher ID to associate with the resource
        total_resources:
          type: integer
          minimum: 1
          description: Total number of resources to allocate
        study_year:
          type: string
          description: Academic year for the resource allocation
      required:
        - teacher_id
        - total_resources
        - study_year

    UpdateResourceRequest:
      type: object
      properties:
        total_resources:
          type: integer
          minimum: 1
          description: Updated total number of resources
      required:
        - total_resources

    CurrentUserResourcesResponse:
      type: object
      properties:
        teacher_id:
          type: integer
          description: Teacher ID
        resources:
          type: array
          items:
            $ref: '#/components/schemas/TeacherResource'
          description: List of resources for the teacher
      required:
        - teacher_id
        - resources

    UpdateResourceResponse:
      type: object
      properties:
        resource_id:
          type: integer
          description: Resource ID
        teacher_id:
          type: integer
          description: Teacher ID
        used_resources:
          type: integer
          description: Number of resources currently used
        total_resources:
          type: integer
          description: Total number of resources allocated
        study_year:
          type: string
          description: Academic year for the resource allocation
      required:
        - resource_id
        - teacher_id
        - used_resources
        - total_resources
        - study_year

    # Company schemas
    Company:
      type: object
      properties:
        company_id:
          type: integer
          format: int64
          description: Unique identifier for the company
        company_name:
          type: string
          description: Name of the company
        industry:
          type: string
          nullable: true
          description: Industry sector of the company
        created_at:
          type: string
          format: date-time
          description: Timestamp when the company was created
      required:
        - company_id
        - company_name
        - created_at

    FavoriteCompany:
      type: object
      properties:
        company_id:
          type: integer
          format: int64
          description: Unique identifier for the company
      required:
        - company_id

    FavoriteCompanyRelation:
      type: object
      properties:
        company_id:
          type: integer
          format: int64
          description: Unique identifier for the company
        teacher_id:
          type: integer
          format: int64
          description: Unique identifier for the teacher
      required:
        - company_id
        - teacher_id

    CreateCompanyRequest:
      type: object
      properties:
        company_name:
          type: string
          description: Name of the company to create
          minLength: 1
      required:
        - company_name

    AddFavoriteCompanyRequest:
      type: object
      properties:
        company_id:
          type: integer
          format: int64
          description: ID of the company to add to favorites
      required:
        - company_id

    # Project schemas
    CreateProjectRequest:
      type: object
      required:
        - project_name
        - project_desc
        - company_id
        - project_status
        - start_date
        - end_date
      properties:
        project_name:
          type: string
          maxLength: 255
          description: Name of the project
        project_desc:
          type: string
          description: Detailed description of the project
        company_id:
          type: integer
          minimum: 1
          description: ID of the company associated with the project
        project_status:
          type: string
          enum: [active, completed, cancelled, on_hold]
          description: Current status of the project
        project_url:
          type: string
          format: uri
          description: URL to project repository or documentation
        start_date:
          type: string
          format: date
          description: Project start date
        end_date:
          type: string
          format: date
          description: Project end date

    UpdateProjectRequest:
      type: object
      required:
        - project_name
        - project_desc
        - company_id
        - project_status
        - start_date
        - end_date
      properties:
        project_name:
          type: string
          maxLength: 255
          description: Name of the project
        project_desc:
          type: string
          description: Detailed description of the project
        company_id:
          type: integer
          minimum: 1
          description: ID of the company associated with the project
        project_status:
          type: string
          enum: [active, completed, cancelled, on_hold]
          description: Current status of the project
        project_url:
          type: string
          format: uri
          description: URL to project repository or documentation
        start_date:
          type: string
          format: date
          description: Project start date
        end_date:
          type: string
          format: date
          description: Project end date

    CreateNoteRequest:
      type: object
      required:
        - note_title
        - note_content
        - note_type
        - created_by_name
      properties:
        note_title:
          type: string
          maxLength: 255
          description: Title of the note
        note_content:
          type: string
          description: Content of the note
        note_url:
          type: string
          format: uri
          description: Optional URL associated with the note
        note_type:
          type: string
          enum: [general, meeting, progress, issue, resource]
          description: Type of the note
        created_by_name:
          type: string
          maxLength: 255
          description: Name of the person creating the note

    JoinProjectRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email of the student to add to the project
        join_code:
          type: string
          description: Join code for the project

    # Response schemas
    LoginExistingUserResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              $ref: '#/components/schemas/UserRole'

    LoginNewUserResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["CREATED"]
            data:
              $ref: '#/components/schemas/UserRole'

    StudentsListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: array
              items:
                $ref: '#/components/schemas/Student'

    StudentExistsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: array
              items:
                $ref: '#/components/schemas/Student'

    StudentCreatedResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["CREATED"]
            data:
              type: array
              items:
                $ref: '#/components/schemas/Student'

    CurrentStudentResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: array
              items:
                $ref: '#/components/schemas/Student'

    StudentUpdatedResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: object
              properties:
                student_id:
                  type: integer
                  format: int64
                student_name:
                  type: string
                email:
                  type: string
                  format: email
                class_code:
                  type: string
                  nullable: true

    BatchCreateResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: object
              properties:
                message:
                  type: string
                  enum: ["success!"]

    StudentProjectsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: array
              items:
                type: integer
                format: int64
              description: Array of project IDs associated with the student

    CompaniesListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: array
              items:
                $ref: '#/components/schemas/Company'

    CompanyCreatedResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["CREATED"]
            data:
              type: array
              items:
                $ref: '#/components/schemas/Company'

    FavoriteCompaniesResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["OK"]
            data:
              type: array
              items:
                $ref: '#/components/schemas/FavoriteCompany'

    FavoriteCompanyCreatedResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              enum: ["CREATED"]
            data:
              $ref: '#/components/schemas/FavoriteCompanyRelation'

    ProjectSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          description: Response data
        message:
          type: string
          description: Optional success message

    ProjectCreatedResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          description: Created resource data
        message:
          type: string
          description: Optional success message

    ProjectErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string
          description: Error message
        code:
          type: integer
          description: HTTP status code

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    enum: ["BAD_REQUEST"]

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    enum: ["UNAUTHORIZED"]

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    enum: ["FORBIDDEN"]

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    enum: ["NOT_FOUND"]

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    enum: ["CONFLICT"]

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  message:
                    type: string
                    enum: ["INTERNAL_SERVER_ERROR"]

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Students
    description: Operations related to student management
  - name: Teachers
    description: Operations related to teacher management
  - name: Resources
    description: Operations related to resource allocation
  - name: Companies
    description: Operations related to company management
  - name: Projects
    description: Operations related to project management
  - name: Project Members
    description: Operations related to project member management
  - name: Project Notes
    description: Operations related to project notes management